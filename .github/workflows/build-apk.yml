name: 🎵 Auto Build Audio Converter APK

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

env:
  ANDROID_API_LEVEL: 33
  ANDROID_BUILD_TOOLS: "33.0.0"
  ANDROID_NDK_VERSION: "25.2.9519653"
  PYTHON_VERSION: "3.11"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 💾 Setup Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.buildozer
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/requirements.txt', '**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
    
    - name: 🔧 Install System Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          build-essential \
          git \
          python3-pip \
          python3-dev \
          python3-setuptools \
          python3-wheel \
          openjdk-11-jdk \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          libffi-dev \
          libssl-dev \
          libfreetype6-dev \
          libxml2-dev \
          libxslt1-dev \
          libjpeg-dev \
          libpng-dev \
          ccache \
          curl \
          unzip \
          zip
    
    - name: 📦 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install buildozer[android] cython
        pip install -r requirements.txt
    
    - name: 🎯 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
        ndk-version: ${{ env.ANDROID_NDK_VERSION }}
    
    - name: 🔍 Verify Android Setup
      run: |
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        ls -la $ANDROID_SDK_ROOT/
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list_installed
    
    - name: 📝 Generate buildozer.spec
      run: |
        if [ ! -f "buildozer.spec" ]; then
          buildozer init
        fi
        
        # Cập nhật cấu hình buildozer
        cat > buildozer.spec << EOF
        [app]
        title = Audio Converter
        package.name = audioconverter
        package.domain = com.audioconverter
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,txt,json
        version = 1.0
        requirements = python3,kivy,kivymd,plyer,pyjnius,requests
        
        [buildozer]
        log_level = 2
        
        [android]
        fullscreen = 0
        android.api = ${{ env.ANDROID_API_LEVEL }}
        android.minapi = 21
        android.ndk = 25b
        android.sdk = ${{ env.ANDROID_API_LEVEL }}
        android.accept_sdk_license = True
        android.gradle_dependencies = 
        android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE
        android.archs = arm64-v8a,armeabi-v7a
        android.allow_backup = True
        android.private_storage = True
        android.wakelock = False
        
        # Icon và splash (nếu có)
        # icon.filename = %(source.dir)s/data/icon.png
        # presplash.filename = %(source.dir)s/data/presplash.png
        
        # Keystore cho release build
        # android.keystore = %(source.dir)s/keystore.jks
        # android.keyalias = myalias
        # android.keystore_passwd = 
        # android.key_passwd = 
        EOF
    
    - name: 🛠️ Build Debug APK
      if: github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == ''
      run: |
        echo "🏗️ Building Debug APK..."
        buildozer android debug
        
        echo "📁 Build output:"
        ls -la bin/
    
    - name: 🔐 Setup Keystore for Release
      if: github.event.inputs.build_type == 'release' && env.KEYSTORE_PASSWORD != ''
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo "$KEYSTORE_BASE64" | base64 -d > keystore.jks
        
        # Cập nhật buildozer.spec với thông tin keystore
        sed -i 's|# android.keystore = .*|android.keystore = keystore.jks|' buildozer.spec
        sed -i 's|# android.keyalias = .*|android.keyalias = myalias|' buildozer.spec
        sed -i 's|# android.keystore_passwd = .*|android.keystore_passwd = '"$KEYSTORE_PASSWORD"'|' buildozer.spec
        sed -i 's|# android.key_passwd = .*|android.key_passwd = '"$KEY_PASSWORD"'|' buildozer.spec
    
    - name: 🚀 Build Release APK
      if: github.event.inputs.build_type == 'release'
      run: |
        echo "🏗️ Building Release APK..."
        buildozer android release
        
        echo "📁 Build output:"
        ls -la bin/
    
    - name: 📊 APK Information
      run: |
        APK_PATH=$(find bin/ -name "*.apk" | head -1)
        if [ -f "$APK_PATH" ]; then
          echo "✅ APK created: $APK_PATH"
          echo "📐 File size: $(du -h "$APK_PATH" | cut -f1)"
          echo "📅 Build date: $(date)"
          echo "🏷️ Git commit: ${{ github.sha }}"
          
          # Tạo build info
          cat > build_info.txt << EOF
          Build Information
          =================
          APK: $(basename "$APK_PATH")
          Size: $(du -h "$APK_PATH" | cut -f1)
          Date: $(date)
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Build Type: ${{ github.event.inputs.build_type || 'debug' }}
          EOF
        else
          echo "❌ No APK found!"
          exit 1
        fi
    
    - name: 📤 Upload APK Artifact
      uses: actions/upload-artifact@v3
      with:
        name: audio-converter-apk-${{ github.run_number }}
        path: |
          bin/*.apk
          build_info.txt
        retention-days: 30
    
    - name: 📋 Comment PR with APK Info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const apkPath = fs.readdirSync('bin/').find(f => f.endsWith('.apk'));
          const stats = fs.statSync(path.join('bin/', apkPath));
          const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
          
          const comment = `## 📱 APK Build Complete
          
          **📦 APK:** \`${apkPath}\`
          **📐 Size:** ${sizeMB} MB
          **⬇️ Download:** Check the [Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          **🔧 Build Info:**
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Build Type: Debug
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: 🏷️ Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          bin/*.apk
          build_info.txt
        generate_release_notes: true
        name: "Audio Converter ${{ github.ref_name }}"
        body: |
          ## 🎵 Audio Converter Android APK
          
          ### 📱 Features:
          - 🎧 Multi-format audio conversion
          - 🎨 User-friendly interface  
          - 📊 Support for MP3, WAV, AAC, OGG, FLAC
          - 🔧 Customizable bitrate settings
          
          ### 📥 Installation:
          1. Download the APK file
          2. Enable "Install from unknown sources" in Android settings
          3. Install the APK
          
          ### 🔧 Requirements:
          - Android 5.0+ (API 21+)
          - 50MB free storage
          - FFmpeg (for full functionality)
          
          ### 🛠️ Build Info:
          - **Commit:** ${{ github.sha }}
          - **Date:** $(date)
          - **Size:** $(du -h bin/*.apk | cut -f1)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🧹 Cleanup
      if: always()
      run: |
        rm -f keystore.jks
        rm -rf ~/.buildozer/.gradle

  # Job để test APK sau khi build
  test-apk:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: 📥 Download APK
      uses: actions/download-artifact@v3
      with:
        name: audio-converter-apk-${{ github.run_number }}
    
    - name: 🔍 APK Analysis
      run: |
        APK_FILE=$(ls *.apk | head -1)
        echo "🔍 Analyzing APK: $APK_FILE"
        
        # Cài đặt aapt
        sudo apt-get update -qq
        sudo apt-get install -y aapt
        
        # Phân tích APK
        echo "📦 APK Info:"
        aapt dump badging "$APK_FILE" | head -20
        
        echo "🔒 Permissions:"
        aapt dump permissions "$APK_FILE"
        
        echo "📐 APK Size Analysis:"
        unzip -l "$APK_FILE" | sort -k1 -nr | head -20
