#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import threading
import subprocess
from typing import Optional
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.spinner import Spinner
from kivy.uix.progressbar import ProgressBar
from kivy.uix.textinput import TextInput
from kivy.uix.filechooser import FileChooserListView
from kivy.uix.popup import Popup
from kivy.uix.scrollview import ScrollView
from kivy.clock import Clock
from kivy.utils import platform
from kivy.logger import Logger
from kivy.storage import primary_external_storage_path
from plyer import filechooser
import json

class AudioConverterApp(App):
    """·ª®ng d·ª•ng chuy·ªÉn ƒë·ªïi audio cho Android"""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.selected_file = None
        self.output_folder = None
        self.conversion_progress = 0
        self.is_converting = False
        
        # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn UI
        self.progress_bar = None
        self.log_text = None
        self.convert_button = None
        self.file_label = None
        self.format_spinner = None
        self.bitrate_input = None
        
    def build(self):
        """X√¢y d·ª±ng giao di·ªán ·ª©ng d·ª•ng"""
        self.title = "üéµ Audio Converter"
        
        # Layout ch√≠nh
        main_layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
        
        # Ti√™u ƒë·ªÅ
        title = Label(
            text='üéµ CHUY·ªÇN ƒê·ªîI AUDIO üéµ',
            size_hint_y=None,
            height=60,
            font_size=20,
            bold=True,
            color=(0.18, 0.53, 0.67, 1)  # M√†u xanh d∆∞∆°ng
        )
        main_layout.add_widget(title)
        
        # Ph·∫ßn ch·ªçn file
        file_section = self.create_file_section()
        main_layout.add_widget(file_section)
        
        # Ph·∫ßn c√†i ƒë·∫∑t
        settings_section = self.create_settings_section()
        main_layout.add_widget(settings_section)
        
        # Thanh ti·∫øn tr√¨nh
        self.progress_bar = ProgressBar(
            max=100,
            value=0,
            size_hint_y=None,
            height=30
        )
        main_layout.add_widget(self.progress_bar)
        
        # N√∫t chuy·ªÉn ƒë·ªïi
        self.convert_button = Button(
            text='üéØ B·∫ÆT ƒê·∫¶U CHUY·ªÇN ƒê·ªîI',
            size_hint_y=None,
            height=60,
            font_size=16,
            bold=True,
            background_color=(0.18, 0.53, 0.67, 1)
        )
        self.convert_button.bind(on_press=self.start_conversion)
        main_layout.add_widget(self.convert_button)
        
        # Khu v·ª±c log
        log_section = self.create_log_section()
        main_layout.add_widget(log_section)
        
        # Kh·ªüi t·∫°o log
        self.log_message("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng chuy·ªÉn ƒë·ªïi audio!")
        self.log_message("L∆∞u √Ω: C·∫ßn c√†i ƒë·∫∑t FFmpeg ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng")
        
        return main_layout
    
    def create_file_section(self):
        """T·∫°o ph·∫ßn ch·ªçn file"""
        file_layout = BoxLayout(orientation='vertical', size_hint_y=None, height=120)
        
        # Label hi·ªÉn th·ªã file ƒë√£ ch·ªçn
        self.file_label = Label(
            text='Ch∆∞a ch·ªçn file',
            size_hint_y=None,
            height=40,
            text_size=(None, None),
            halign='center'
        )
        file_layout.add_widget(self.file_label)
        
        # N√∫t ch·ªçn file
        select_file_btn = Button(
            text='üìÅ Ch·ªçn file Audio',
            size_hint_y=None,
            height=50,
            background_color=(0.64, 0.23, 0.45, 1)  # M√†u t√≠m
        )
        select_file_btn.bind(on_press=self.select_file)
        file_layout.add_widget(select_file_btn)
        
        return file_layout
    
    def create_settings_section(self):
        """T·∫°o ph·∫ßn c√†i ƒë·∫∑t"""
        settings_layout = BoxLayout(orientation='vertical', size_hint_y=None, height=120)
        
        # Format selection
        format_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        format_layout.add_widget(Label(text='ƒê·ªãnh d·∫°ng:', size_hint_x=0.3))
        
        self.format_spinner = Spinner(
            text='MP3',
            values=['MP3', 'WAV', 'AAC', 'OGG', 'FLAC'],
            size_hint_x=0.7
        )
        format_layout.add_widget(self.format_spinner)
        settings_layout.add_widget(format_layout)
        
        # Bitrate input
        bitrate_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        bitrate_layout.add_widget(Label(text='Bitrate (kbps):', size_hint_x=0.3))
        
        self.bitrate_input = TextInput(
            text='192',
            multiline=False,
            input_filter='int',
            size_hint_x=0.7
        )
        bitrate_layout.add_widget(self.bitrate_input)
        settings_layout.add_widget(bitrate_layout)
        
        return settings_layout
    
    def create_log_section(self):
        """T·∫°o ph·∫ßn log"""
        log_layout = BoxLayout(orientation='vertical', size_hint_y=0.4)
        
        log_label = Label(
            text='üìã Nh·∫≠t k√Ω:',
            size_hint_y=None,
            height=30,
            bold=True
        )
        log_layout.add_widget(log_label)
        
        # ScrollView cho log
        scroll = ScrollView()
        self.log_text = TextInput(
            text='',
            multiline=True,
            readonly=True,
            background_color=(0.96, 0.96, 0.96, 1)
        )
        scroll.add_widget(self.log_text)
        log_layout.add_widget(scroll)
        
        return log_layout
    
    def select_file(self, instance):
        """Ch·ªçn file audio"""
        try:
            if platform == 'android':
                # S·ª≠ d·ª•ng filechooser cho Android
                filechooser.open_file(
                    on_selection=self.handle_file_selection,
                    filters=['*.mp3', '*.wav', '*.aac', '*.ogg', '*.flac', '*.m4a']
                )
            else:
                # Fallback cho desktop testing
                self.show_file_chooser_popup()
        except Exception as e:
            self.log_message(f"‚ùå L·ªói ch·ªçn file: {str(e)}")
    
    def handle_file_selection(self, selection):
        """X·ª≠ l√Ω file ƒë√£ ch·ªçn"""
        if selection:
            self.selected_file = selection[0]
            filename = os.path.basename(self.selected_file)
            self.file_label.text = f"ƒê√£ ch·ªçn: {filename}"
            self.log_message(f"üìÅ ƒê√£ ch·ªçn file: {filename}")
    
    def show_file_chooser_popup(self):
        """Hi·ªÉn th·ªã popup ch·ªçn file (cho desktop testing)"""
        content = BoxLayout(orientation='vertical')
        
        filechooser = FileChooserListView(
            filters=['*.mp3', '*.wav', '*.aac', '*.ogg', '*.flac', '*.m4a'],
            path=os.path.expanduser('~')
        )
        content.add_widget(filechooser)
        
        button_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        
        select_btn = Button(text='Ch·ªçn')
        cancel_btn = Button(text='H·ªßy')
        
        button_layout.add_widget(select_btn)
        button_layout.add_widget(cancel_btn)
        content.add_widget(button_layout)
        
        popup = Popup(
            title='Ch·ªçn file Audio',
            content=content,
            size_hint=(0.9, 0.9)
        )
        
        def on_select(instance):
            if filechooser.selection:
                self.handle_file_selection(filechooser.selection)
            popup.dismiss()
        
        def on_cancel(instance):
            popup.dismiss()
        
        select_btn.bind(on_press=on_select)
        cancel_btn.bind(on_press=on_cancel)
        
        popup.open()
    
    def start_conversion(self, instance):
        """B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi"""
        if not self.selected_file:
            self.log_message("‚ùå Vui l√≤ng ch·ªçn file ƒë·∫ßu v√†o!")
            return
        
        if self.is_converting:
            self.log_message("‚ö†Ô∏è ƒêang chuy·ªÉn ƒë·ªïi, vui l√≤ng ƒë·ª£i!")
            return
        
        # Thi·∫øt l·∫≠p output path
        if platform == 'android':
            self.output_folder = primary_external_storage_path()
        else:
            self.output_folder = os.path.expanduser('~/Downloads')
        
        # T·∫°o t√™n file ƒë·∫ßu ra
        input_name = os.path.splitext(os.path.basename(self.selected_file))[0]
        output_format = self.format_spinner.text.lower()
        output_file = os.path.join(self.output_folder, f"{input_name}_converted.{output_format}")
        
        # B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi trong thread ri√™ng
        self.is_converting = True
        self.convert_button.text = 'üîÑ ƒêang chuy·ªÉn ƒë·ªïi...'
        self.convert_button.disabled = True
        
        conversion_thread = threading.Thread(
            target=self.convert_audio,
            args=(self.selected_file, output_file, output_format)
        )
        conversion_thread.daemon = True
        conversion_thread.start()
        
        self.log_message(f"üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi sang {output_format.upper()}...")
    
    def convert_audio(self, input_file, output_file, output_format):
        """Chuy·ªÉn ƒë·ªïi audio (ch·∫°y trong thread ri√™ng)"""
        try:
            # Ki·ªÉm tra FFmpeg
            if not self.check_ffmpeg():
                Clock.schedule_once(lambda dt: self.conversion_finished(
                    False, "‚ùå Kh√¥ng t√¨m th·∫•y FFmpeg. Vui l√≤ng c√†i ƒë·∫∑t FFmpeg."
                ), 0)
                return
            
            # T·∫°o l·ªánh FFmpeg
            bitrate = self.bitrate_input.text or '192'
            cmd = [
                'ffmpeg',
                '-i', input_file,
                '-ab', f'{bitrate}k',
                '-y',
                output_file
            ]
            
            # Th√™m codec cho t·ª´ng ƒë·ªãnh d·∫°ng
            if output_format == 'mp3':
                cmd.insert(-1, '-acodec')
                cmd.insert(-1, 'libmp3lame')
            elif output_format == 'aac':
                cmd.insert(-1, '-acodec')
                cmd.insert(-1, 'aac')
            elif output_format == 'ogg':
                cmd.insert(-1, '-acodec')
                cmd.insert(-1, 'libvorbis')
            
            # M√¥ ph·ªèng ti·∫øn tr√¨nh
            for i in range(0, 101, 5):
                Clock.schedule_once(lambda dt, progress=i: self.update_progress(progress), 0)
                threading.Event().wait(0.1)
            
            # Ch·∫°y FFmpeg
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True
            )
            
            stdout, stderr = process.communicate()
            
            if process.returncode == 0:
                Clock.schedule_once(lambda dt: self.conversion_finished(
                    True, f"‚úÖ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng! File l∆∞u t·∫°i: {output_file}"
                ), 0)
            else:
                Clock.schedule_once(lambda dt: self.conversion_finished(
                    False, f"‚ùå L·ªói chuy·ªÉn ƒë·ªïi: {stderr}"
                ), 0)
                
        except Exception as e:
            Clock.schedule_once(lambda dt: self.conversion_finished(
                False, f"‚ùå L·ªói: {str(e)}"
            ), 0)
    
    def check_ffmpeg(self):
        """Ki·ªÉm tra FFmpeg c√≥ s·∫µn kh√¥ng"""
        try:
            subprocess.run(['ffmpeg', '-version'], 
                         capture_output=True, check=True)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            return False
    
    def update_progress(self, value):
        """C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh"""
        self.progress_bar.value = value
    
    def conversion_finished(self, success, message):
        """X·ª≠ l√Ω khi chuy·ªÉn ƒë·ªïi ho√†n th√†nh"""
        self.is_converting = False
        self.convert_button.text = 'üéØ B·∫ÆT ƒê·∫¶U CHUY·ªÇN ƒê·ªîI'
        self.convert_button.disabled = False
        
        if success:
            self.progress_bar.value = 100
        else:
            self.progress_bar.value = 0
        
        self.log_message(message)
    
    def log_message(self, message):
        """Th√™m tin nh·∫Øn v√†o log"""
        if self.log_text:
            self.log_text.text += f"\n{message}"
            # Scroll to bottom
            self.log_text.cursor = (0, 0)

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == '__main__':
    AudioConverterApp().run()
